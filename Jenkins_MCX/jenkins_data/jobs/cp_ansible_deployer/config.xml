<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1326.ve643e00e9220">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>ANSIBLE_SKIP_TAGS</string>
        <string>ANSIBLE_LIMIT</string>
        <string>UP_GRADE_DOWN_GRADE</string>
        <string>ANSIBLE_TAGS</string>
        <string>POST_CHECK</string>
        <string>PRIVATE_KEY</string>
        <string>ARTEFACTS_DIR</string>
        <string>GIT_REPO</string>
        <string>CP_VERSION</string>
        <string>HASH_CHECK</string>
        <string>COLLECTIONS_DIR</string>
        <string>REF</string>
        <string>PRE_CHECK</string>
        <string>AIR_GAPPED</string>
        <string>TOKEN</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GIT_REPO</name>
          <description>URL of the Git repository</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <com.cloudbees.plugins.credentials.CredentialsParameterDefinition plugin="credentials@1271.v54b_1c2c6388a_">
          <name>TOKEN</name>
          <description>Private access token for the Git repository</description>
          <defaultValue></defaultValue>
          <credentialType>com.cloudbees.plugins.credentials.common.StandardCredentials</credentialType>
          <required>false</required>
        </com.cloudbees.plugins.credentials.CredentialsParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REF</name>
          <description>Branch or tag.</description>
          <defaultValue>master</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ARTEFACTS_DIR</name>
          <description>Relative path where the playbook hosts and config are present.</description>
          <defaultValue>.</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>COLLECTIONS_DIR</name>
          <description>Relative path where the tar files are present</description>
          <defaultValue>/root/.ansible/collections/ansible_collections/confluent/platform</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CP_VERSION</name>
          <description>CP version to install.</description>
          <defaultValue>7.4.1</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <com.cloudbees.plugins.credentials.CredentialsParameterDefinition plugin="credentials@1271.v54b_1c2c6388a_">
          <name>PRIVATE_KEY</name>
          <description>SSH private key for accessing the remote machines.</description>
          <defaultValue></defaultValue>
          <credentialType>com.cloudbees.plugins.credentials.common.StandardCredentials</credentialType>
          <required>true</required>
        </com.cloudbees.plugins.credentials.CredentialsParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ANSIBLE_TAGS</name>
          <description>Values to pass to the --tags parameter</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ANSIBLE_SKIP_TAGS</name>
          <description>Values to pass to the --skip-tags parameter</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ANSIBLE_LIMIT</name>
          <description>Values to pass to the --limit parameter</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>UP_GRADE/DOWN_GRADE</name>
          <description>Upgrade and downgrade</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>AIR_GAPPED</name>
          <description>Specify if the environment is air-gapped</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3769.v8b_e595e4d40d">
    <script>pipeline {
    agent any

    parameters {
        string(name: &apos;PRE_CHECK&apos;, description: &apos;Python_artifact&apos;, defaultValue: &apos;precheck.py&apos;)
        string(name: &apos;POST_CHECK&apos;, description: &apos;Python_artifact&apos;, defaultValue: &apos;postcheck.py&apos;)
        string(name: &apos;HASH_CHECK&apos;, description: &apos;Python_artifact&apos;, defaultValue: &apos;hashcheck.py&apos;)
        string(name: &apos;GIT_REPO&apos;, description: &apos;URL of the Git repository&apos;, defaultValue: &apos;&apos;)
        credentials(name: &apos;TOKEN&apos;, description: &apos;Private access token for the Git repository&apos;, defaultValue: &apos;&apos;, required: false)
        string(name: &apos;REF&apos;, description: &apos;Branch or tag.&apos;, trim: true, defaultValue: &apos;master&apos;)
        string(name: &apos;ARTEFACTS_DIR&apos;, description: &apos;Relative path where the playbook hosts and config are present.&apos;, trim: true, defaultValue: &apos;.&apos;)
        string(name: &apos;COLLECTIONS_DIR&apos;, description: &apos;Relative path where the tar files are present&apos;, trim: true, defaultValue: &apos;/root/.ansible/collections/ansible_collections/confluent/platform&apos;)
        string(name: &apos;CP_VERSION&apos;, description: &apos;CP version to install.&apos;, trim: true, defaultValue: &apos;7.4.1&apos;)
        credentials(name: &apos;PRIVATE_KEY&apos;, description: &apos;SSH private key for accessing the remote machines.&apos;, defaultValue: &apos;&apos;, required: true)
        string(name: &apos;ANSIBLE_TAGS&apos;, description: &apos;Values to pass to the --tags parameter&apos;, trim: true, defaultValue: &apos;&apos;)
        string(name: &apos;ANSIBLE_SKIP_TAGS&apos;, description: &apos;Values to pass to the --skip-tags parameter&apos;, trim: true, defaultValue: &apos;&apos;)
        string(name: &apos;ANSIBLE_LIMIT&apos;, description: &apos;Values to pass to the --limit parameter&apos;, trim: true, defaultValue: &apos;&apos;)
        booleanParam(name: &apos;UP_GRADE_DOWN_GRADE&apos;, description: &apos;Upgrade and downgrade&apos;, defaultValue: false)
        booleanParam(name: &apos;AIR_GAPPED&apos;, description: &apos;Specify if the environment is air-gapped&apos;, defaultValue: false)
    }

    stages {
        stage(&apos;Check Java&apos;) {
            steps {
                script {
                    def javaVersion = sh(script: &apos;java -version 2&gt;&amp;1 | grep version&apos;, returnStdout: true).trim()
                    echo &quot;Java Version: ${javaVersion}&quot;
                }
            }
        }

        stage(&apos;Check Python&apos;) {
            steps {
                script {
                    def pythonVersion = sh(script: &apos;python3 --version 2&gt;&amp;1&apos;, returnStdout: true).trim()
                    echo &quot;Python Version: ${pythonVersion}&quot;
                }
            }
        }

        stage(&apos;Check Ansible&apos;) {
            steps {
                script {
                    def ansibleVersion = sh(script: &apos;ansible --version 2&gt;&amp;1 | grep ansible&apos;, returnStdout: true).trim()
                    echo &quot;Ansible Version: ${ansibleVersion}&quot;
                }
            }
        }

        stage(&apos;Check Collections Folder&apos;) {
            steps {
                script {
                    def collectionsFolder = sh(script: &quot;ls ${params.COLLECTIONS_DIR}&quot;, returnStatus: true)
                    if (collectionsFolder == 0) {
                        echo &quot;Collections Folder is present.&quot;
                    } else {
                        error &quot;Collections Folder is not present.&quot;
                    }
                }
            }
        }

        stage(&apos;Git Checkout&apos;) {
            steps {
                script {
                    def token = params.TOKEN
                    def repoUrl = params.GIT_REPO
                    def repo = repoUrl.split(&apos;https://&apos;)
                    if (token) {
                        withCredentials([string(credentialsId: params.TOKEN, variable: &apos;TOKEN&apos;)]) {
                            sh &quot;&quot;&quot;
                                git clone -c advice.detachedHead=false --depth 1 --branch ${params.REF} https://\$TOKEN@${repo[1]} ${env.BUILD_NUMBER}
                            &quot;&quot;&quot;
                        }
                    } else {
                        sh &quot;&quot;&quot;
                            git clone -c advice.detachedHead=false --depth 1 --branch ${params.REF} ${params.GIT_REPO} ${env.BUILD_NUMBER}
                        &quot;&quot;&quot;
                    }
                }
            }
        }

        stage(&apos;Download collection&apos;) {
            steps {
                dir(&quot;${env.BUILD_NUMBER}&quot;) {
                    script {
                        if (params.AIR_GAPPED) {
                            sh &quot;ansible-galaxy collection install confluent-platform-${params.CP_VERSION}.tar.gz&quot;
                        } else {
                            echo &quot;Downloading collection with internet&quot;
                            sh &quot;ansible-galaxy collection install confluent.platform:${params.CP_VERSION}&quot;
                        }
                    }
                }
            }
        }

        stage(&apos;Download Packages&apos;) {
            steps {
                script {
                    def kafkaPythonVersion = &apos;2.0.2&apos;
                    def confluentKafkaVersion = &apos;2.3.0&apos;

                    if (params.AIR_GAPPED) {
                        dir(&quot;${params.ARTEFACTS_DIR}&quot;) {
                            sh &quot;pip install kafka-python-${kafkaPythonVersion}.tar.gz --break-system-packages&quot;
                        }
                    } else {
                        sh &quot;pip install kafka-python==${kafkaPythonVersion} --break-system-packages&quot;
                        sh &quot;pip install confluent-kafka==${confluentKafkaVersion} --break-system-packages&quot;
                    }
                }
            }
        }

        stage(&apos;Precheck&apos;) {
            when {
                expression { params.UP_GRADE_DOWN_GRADE == true }
            }
            steps {
                dir(&quot;${env.BUILD_NUMBER}&quot;) {
                    sh &quot;&quot;&quot;
                        cd ${params.ARTEFACTS_DIR}
                        python3 ${params.PRE_CHECK}
                    &quot;&quot;&quot;
                }
            }
        }

                stage(&apos;Run playbook&apos;) {
            steps {
                script {
                    def ansibleArgs = &apos;&apos;
                    if (params.ANSIBLE_TAGS) {
                        ansibleArgs = ansibleArgs.concat(&quot; --tags &quot; + params.ANSIBLE_TAGS)
                    }
                    if (params.ANSIBLE_SKIP_TAGS) {
                        ansibleArgs = ansibleArgs.concat(&quot; --skip-tags &quot; + params.ANSIBLE_SKIP_TAGS)
                    }
                    if (params.ANSIBLE_LIMIT) {
                        ansibleArgs = ansibleArgs.concat(&quot; --limit &quot; + params.ANSIBLE_LIMIT)
                    }

                    if (params.AIR_GAPPED) {
                        withCredentials([file(credentialsId: params.PRIVATE_KEY, variable: &apos;PRIVATE_KEY&apos;)]) {
                            dir(&quot;${env.BUILD_NUMBER}&quot;) {
                                sh &quot;&quot;&quot;
                                    cd ${params.ARTEFACTS_DIR}
                                    cat &quot;\$PRIVATE_KEY&quot; &gt; private-key
                                    chmod 400 private-key
                                    ansible-playbook -i hosts.yml confluent.platform.all ${ansibleArgs}
                                &quot;&quot;&quot;
                            }
                        }
                    } else {
                        withCredentials([file(credentialsId: params.PRIVATE_KEY, variable: &apos;PRIVATE_KEY&apos;)]) {
                            dir(&quot;${env.BUILD_NUMBER}&quot;) {
                                sh &quot;&quot;&quot;
                                    cd ${params.ARTEFACTS_DIR}
                                    cat &quot;\$PRIVATE_KEY&quot; &gt; private-key
                                    chmod 400 private-key
                                    ansible-playbook -i newhost.yml confluent.platform.all ${ansibleArgs}
                                &quot;&quot;&quot;
                            }
                        }
                    }
                }
            }
        }

        stage(&apos;Postcheck&apos;) {
            steps {
                dir(&quot;${env.BUILD_NUMBER}&quot;) {
                    sh &quot;&quot;&quot;
                        cd ${params.ARTEFACTS_DIR}
                        python3 ${params.POST_CHECK}
                    &quot;&quot;&quot;
                }
            }
        }

        stage(&apos;Compare-Hash&apos;) {
            steps {
                dir(&quot;${env.BUILD_NUMBER}&quot;) {
                    sh &quot;&quot;&quot;
                        cd ${params.ARTEFACTS_DIR}
                        python3 ${params.HASH_CHECK}
                    &quot;&quot;&quot;
                }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>