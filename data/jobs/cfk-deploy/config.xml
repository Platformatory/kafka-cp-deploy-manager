<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1326.ve643e00e9220">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>NAMESPACE</string>
        <string>REF</string>
        <string>KUBECONFIG</string>
        <string>ARTEFACTS_DIR</string>
        <string>GIT_REPO</string>
        <string>TOKEN</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GIT_REPO</name>
          <description>URL of the Git repository</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <com.cloudbees.plugins.credentials.CredentialsParameterDefinition plugin="credentials@1271.v54b_1c2c6388a_">
          <name>TOKEN</name>
          <description>Private access token for the Git repository</description>
          <defaultValue></defaultValue>
          <required>false</required>
        </com.cloudbees.plugins.credentials.CredentialsParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REF</name>
          <description>Branch or tag.</description>
          <defaultValue>1.0.1</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ARTEFACTS_DIR</name>
          <description>Relative path where the YAML artefacts are present.</description>
          <defaultValue>.</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>NAMESPACE</name>
          <description>Namespace to install the artefacts.</description>
          <defaultValue>cf</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <com.cloudbees.plugins.credentials.CredentialsParameterDefinition plugin="credentials@1271.v54b_1c2c6388a_">
          <name>KUBECONFIG</name>
          <description>Kubeconfig secret</description>
          <defaultValue></defaultValue>
          <required>true</required>
        </com.cloudbees.plugins.credentials.CredentialsParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3769.v8b_e595e4d40d">
    <script>pipeline {
  agent any
 
  parameters {
        string(name: &apos;GIT_REPO&apos;, description: &apos;URL of the Git repository&apos;, defaultValue: &apos;&apos;)
        credentials(name: &apos;TOKEN&apos;, description: &apos;Private access token for the Git repository&apos;, defaultValue: &apos;&apos;, required: false)
        string(name: &apos;REF&apos;, description: &apos;Branch or tag.&apos;, trim: true, defaultValue: &apos;1.0.1&apos;)
        string(name: &apos;ARTEFACTS_DIR&apos;, description: &apos;Relative path where the YAML artefacts are present.&apos;, trim: true, defaultValue: &apos;.&apos;)
        string(name: &apos;NAMESPACE&apos;, description: &apos;Namespace to install the artefacts.&apos;, trim: true, defaultValue: &apos;cf&apos;)
        credentials(name: &apos;KUBECONFIG&apos;, description: &apos;Kubeconfig secret&apos;, defaultValue: &apos;&apos;, required: true)
  } 
  stages {
    stage(&apos;git checkout&apos;) {
      steps {
        script {
            def token = params.TOKEN
            def repoUrl = params.GIT_REPO
            def repo = repoUrl.split(&apos;https://&apos;)            
            if (token) {
              withCredentials([string(credentialsId: params.TOKEN, variable: &apos;TOKEN&apos;)]) {
                sh &quot;&quot;&quot;
                  git clone -c advice.detachedHead=false --depth 1 --branch ${params.REF} https://\$TOKEN@${repo[1]} ${env.BUILD_NUMBER}
                &quot;&quot;&quot;
              }
           } else {
             sh &quot;&quot;&quot;
             git clone -c advice.detachedHead=false --depth 1 --branch ${params.REF} ${params.GIT_REPO} ${env.BUILD_NUMBER}
             &quot;&quot;&quot;
           }
        }
      }
    }

    stage(&apos;kubectl apply&apos;) {
      steps {
        script {
          withCredentials([file(credentialsId: params.KUBECONFIG, variable: &apos;KUBECONFIG&apos;)]) {
            dir(&quot;${env.BUILD_NUMBER}&quot;) {
              sh &quot;&quot;&quot;
              cd ${params.ARTEFACTS_DIR}
              for file in *.yml; do
                  kubectl apply -f &quot;\$file&quot; --namespace ${params.NAMESPACE}
               done
              &quot;&quot;&quot;
            }
          }
        }
      }
    }

    stage(&apos;check status&apos;) {
      steps {
        script {
          withCredentials([file(credentialsId: params.KUBECONFIG, variable: &apos;KUBECONFIG&apos;)]) {
            dir(&quot;${env.BUILD_NUMBER}&quot;) {
              sh &quot;&quot;&quot;
              kubectl rollout status --watch --timeout=600s statefulset/zookeeper --namespace ${params.NAMESPACE}
              echo &quot;Zookeeper rolled out successfully.&quot;
              sleep 20
              kubectl rollout status --watch --timeout=600s statefulset/kafka --namespace ${params.NAMESPACE}
              echo &quot;Kafka rolled out successfully.&quot;

              if kubectl get statefulset schemaregistry --namespace ${params.NAMESPACE} &amp;&gt; /dev/null; then
                  kubectl rollout status --watch --timeout=600s statefulset/schemaregistry --namespace ${params.NAMESPACE}
                  echo &quot;Schema registry rolled out successfully.&quot;
              fi

              if kubectl get statefulset ksqldb --namespace ${params.NAMESPACE} &amp;&gt; /dev/null; then
                  kubectl rollout status --watch --timeout=600s statefulset/ksqldb --namespace ${params.NAMESPACE}
                  echo &quot;ksqldb rolled out successfully.&quot;
              fi

              if kubectl get statefulset connect --namespace ${params.NAMESPACE} &amp;&gt; /dev/null; then
                  kubectl rollout status --watch --timeout=600s statefulset/connect --namespace ${params.NAMESPACE}
                  echo &quot;Connect rolled out successfully.&quot;
              fi

              if kubectl get statefulset controlcenter --namespace ${params.NAMESPACE} &amp;&gt; /dev/null; then
                  kubectl rollout status --watch --timeout=600s statefulset/controlcenter --namespace ${params.NAMESPACE}
                  echo &quot;Control center rolled out successfully.&quot;
              fi
              &quot;&quot;&quot;
            }
          }
        }
      }
    }

  }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>