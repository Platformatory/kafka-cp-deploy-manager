<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1326.ve643e00e9220">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>ANSIBLE_SKIP_TAGS</string>
        <string>ANSIBLE_LIMIT</string>
        <string>REF</string>
        <string>ANSIBLE_TAGS</string>
        <string>PRIVATE_KEY</string>
        <string>ARTEFACTS_DIR</string>
        <string>GIT_REPO</string>
        <string>TOKEN</string>
        <string>CP_VERSION</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GIT_REPO</name>
          <description>URL of the Git repository</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <com.cloudbees.plugins.credentials.CredentialsParameterDefinition plugin="credentials@1271.v54b_1c2c6388a_">
          <name>TOKEN</name>
          <description>Private access token for the Git repository</description>
          <defaultValue></defaultValue>
          <required>false</required>
        </com.cloudbees.plugins.credentials.CredentialsParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REF</name>
          <description>Branch or tag.</description>
          <defaultValue>1.0.2</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ARTEFACTS_DIR</name>
          <description>Relative path where the playbook hosts and config is present.</description>
          <defaultValue>.</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CP_VERSION</name>
          <description>CP version to install.</description>
          <defaultValue>7.4.1</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <com.cloudbees.plugins.credentials.CredentialsParameterDefinition plugin="credentials@1271.v54b_1c2c6388a_">
          <name>PRIVATE_KEY</name>
          <description>ssh private key for accessing the remote machines.</description>
          <defaultValue></defaultValue>
          <required>true</required>
        </com.cloudbees.plugins.credentials.CredentialsParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ANSIBLE_TAGS</name>
          <description>Values to pass to the --tags parameter</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ANSIBLE_SKIP_TAGS</name>
          <description>Values to pass to the --skip-tags parameter</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ANSIBLE_LIMIT</name>
          <description>Values to pass to the --limit parameter</description>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3769.v8b_e595e4d40d">
    <script>pipeline {
    agent {
        label &apos;ansible-runner&apos;
    }
 
  parameters {
        string(name: &apos;GIT_REPO&apos;, description: &apos;URL of the Git repository&apos;, defaultValue: &apos;&apos;)
        credentials(name: &apos;TOKEN&apos;, description: &apos;Private access token for the Git repository&apos;, defaultValue: &apos;&apos;, required: false)
        string(name: &apos;REF&apos;, description: &apos;Branch or tag.&apos;, trim: true, defaultValue: &apos;1.0.2&apos;)
        string(name: &apos;ARTEFACTS_DIR&apos;, description: &apos;Relative path where the playbook hosts and config is present.&apos;, trim: true, defaultValue: &apos;.&apos;)
        string(name: &apos;CP_VERSION&apos;, description: &apos;CP version to install.&apos;, trim: true, defaultValue: &apos;7.4.1&apos;)        
        credentials(name: &apos;PRIVATE_KEY&apos;, description: &apos;ssh private key for accessing the remote machines.&apos;, defaultValue: &apos;&apos;, required: true)
        string(name: &apos;ANSIBLE_TAGS&apos;, description: &apos;Values to pass to the --tags parameter&apos;, trim: true, defaultValue: &apos;&apos;)
        string(name: &apos;ANSIBLE_SKIP_TAGS&apos;, description: &apos;Values to pass to the --skip-tags parameter&apos;, trim: true, defaultValue: &apos;&apos;)
        string(name: &apos;ANSIBLE_LIMIT&apos;, description: &apos;Values to pass to the --limit parameter&apos;, trim: true, defaultValue: &apos;&apos;)
  } 
  stages {
    stage(&apos;git checkout&apos;) {
      steps {
        script {
            def token = params.TOKEN
            def repoUrl = params.GIT_REPO
            def repo = repoUrl.split(&apos;https://&apos;)            
            if (token) {
              withCredentials([string(credentialsId: params.TOKEN, variable: &apos;TOKEN&apos;)]) {
                sh &quot;&quot;&quot;
                  git clone -c advice.detachedHead=false --depth 1 --branch ${params.REF} https://\$TOKEN@${repo[1]} ${env.BUILD_NUMBER}
                &quot;&quot;&quot;
              }
           } else {
             sh &quot;&quot;&quot;
             git clone -c advice.detachedHead=false --depth 1 --branch ${params.REF} ${params.GIT_REPO} ${env.BUILD_NUMBER}
             &quot;&quot;&quot;
           }
        }
      }
    }

    stage(&apos;Download collection&apos;) {
      steps {
        script {
          dir(&quot;${env.BUILD_NUMBER}&quot;) {
            sh &quot;&quot;&quot;
            cd ${params.ARTEFACTS_DIR}
            ansible-galaxy collection install confluent.platform:${params.CP_VERSION} -p collections
            &quot;&quot;&quot;
          }
        }
      }
    }

    stage(&apos;Run playbook&apos;) {
      steps {
        script {
          def ansibleArgs = &apos;&apos;
          if (params.ANSIBLE_TAGS) {
            ansibleArgs = ansibleArgs.concat(&quot; --tags &quot; + params.ANSIBLE_TAGS)
          }
          if (params.ANSIBLE_SKIP_TAGS) {
            ansibleArgs = ansibleArgs.concat(&quot; --skip-tags &quot; + params.ANSIBLE_SKIP_TAGS)
          }
          if (params.ANSIBLE_LIMIT) {
            ansibleArgs = ansibleArgs.concat(&quot; --limit &quot; + params.ANSIBLE_LIMIT)
          }
          withCredentials([file(credentialsId: params.PRIVATE_KEY, variable: &apos;PRIVATE_KEY&apos;)]) {
            dir(&quot;${env.BUILD_NUMBER}&quot;) {
              sh &quot;&quot;&quot;
              cd ${params.ARTEFACTS_DIR}
              cat &quot;\$PRIVATE_KEY&quot; &gt; private-key
              chmod 400 private-key
              ansible-playbook -i hosts.yml confluent.platform.all ${ansibleArgs}
              &quot;&quot;&quot;
            }
          }
        }
      }
    }

  }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>